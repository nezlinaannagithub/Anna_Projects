#ifndef _GAME_
#define _GAME_
//------------------------------------------------------------------------------
#include "Shapes.h"
#include "Board.h"
#include "IO.h"
#include <time.h>
//------------------------------------------------------------------------------
#define WAIT_TIME 700
//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
class Game
{
public:

	Game (Board *sBoard, Shapes *sShapes, IO *sIO, int sdScreenHeight);

    void DrawScene ();
    void CreateNewPiece ();

	int mPosX, mPosY;
	int mShape, mRott;

private:

	int mScreenHeight;
	int mNextPosX, mNextPosY;
	int mNextShape, mNextRott;

	Board *mBoard;
	Shapes *mShapes;
	IO *mIO;

	int GetRand (int sA, int sB);
	void InitGame();
	void DrawPiece (int sX, int sY, int sPiece, int sRott);
	void DrawBoard ();
};
int Game::GetRand (int sA, int sB)
{
    return rand () % (sB - sA + 1) + sA;
}
void Game::InitGame()
{
    srand ((unsigned int) time(NULL));

	mShape          = GetRand (0, 6);
	mRott       = 0;
	mPosX           = (BOARD_WIDTH / 2) + mShapes->GetXInitPos (mShape, mRott);
	mPosY           = mShapes->GetYInitPos (mShape, mRott);

	mNextShape      = GetRand (0, 6);
	mNextRott   = 0;
    mNextPosX       = BOARD_WIDTH + 5;
    mNextPosY       = 5;
}
void Game::CreateNewPiece()
{
	mShape         = mNextShape;
	mRott       = mNextRott;
	mPosX           = (BOARD_WIDTH / 2) + mShapes->GetXInitPos (mShape, mRott);
	mPosY           = mShapes->GetYInitPos (mShape, mRott);

	mNextShape      = GetRand (0, 6);
	mNextRott   = GetRand (0, 3);
}
#endif
