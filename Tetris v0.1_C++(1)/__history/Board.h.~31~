#ifndef _BOARD_
#define _BOARD_
//-----------------------------------------------------------------------------
#include "Shapes.h"
//-----------------------------------------------------------------------------
#define BOARD_LINE_WIDTH 6
#define BLOCK_SIZE 20
#define BOARD_POSITION 320
#define BOARD_WIDTH 10
#define BOARD_HEIGHT 20
#define MIN_VERTICAL_MARGIN 20
#define MIN_HORIZONTAL_MARGIN 20
#define PIECE_BLOCKS 5
//-----------------------------------------------------------------------------
//                           Класс ігрового поля
//-----------------------------------------------------------------------------
class Board
{
public:

  Board (Shapes *sShapes, int sScreenHeight);

	int GetXInPixels         (int sPos);
	int GetYInPixels         (int sPos);
	bool IsBlockFree            (int sX, int sY);
	bool IsMovementPossible     (int sX, int sY, int sPiece, int sRotation);
	void StorePiece             (int sX, int sY, int sPiece, int sRotation);
    void DeletePossibleLines    ();
	bool IsGameOver             ();

private:
	enum { CELL_EMPTY, CELL_FILLED };
	int mBoard [BOARD_WIDTH][BOARD_HEIGHT];
	Shapes *mShapes;
	int mScreenHeight;

	void InitBoard();
    void DeleteLine(int sY);
};
void Board::InitBoard()
{
	for (int i=0; i < BOARD_WIDTH; i++)
	 for (int j=0 ; i < BOARD_HEIGHT; j++)
       mBoard[i][j]= CELL_EMPTY;
}
void Board::StorePiece (int sX, int sY, int sShape, int sRott)
{
	for (int i1 = sX, i2 = 0; i1 < sX + PIECE_BLOCKS; i1++, i2++)
	{
        for (int j1 = sY, j2 = 0; j1 < sY + PIECE_BLOCKS; j1++, j2++)
		{
			if (mShapes->GetBlockType (sShape, sRott, j2, i2) != 0)
				mBoard[i1][j1] = CELL_FILLED;
        }
    }
}
bool Board::IsGameOver()
{
    for (int i = 0; i < BOARD_WIDTH; i++)
    {
        if (mBoard[i][0] == CELL_FILLED) return true;
    }
    return false;
}
void Board::DeleteLine (int sY)
{
	for (int j = sY; j > 0; j--)
	{
		for (int i = 0; i < BOARD_WIDTH; i++)
		{
            mBoard[i][j] = mBoard[i][j-1];
        }
    }
}
void Board::DeletePossibleLines ()
{
    for (int j = 0; j < BOARD_HEIGHT; j++)
    {
        int i = 0;
        while (i < BOARD_WIDTH)
        {
			if (mBoard[i][j] != CELL_FILLED) break;
            i++;
        }
        if (i == BOARD_WIDTH) DeleteLine (j);
    }
}
bool Board::IsFreeBlock (int sX, int sY)
{
    if (mBoard [sX][sY] == CELL_EMPTY) return true; else return false;
}
#endif _BOARD_
